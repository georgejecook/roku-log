' /**
'  * @member initializeLogManager
'  * @memberof module:LogMixin
'  * @instance
'  * @description creates Log manager, and places it on global
'  *              expects to have access to globalNode on m.global (i.e. from within an SG control)
'  * @param {transportTypes} array of transportsType names.
'  *      you can provide your own transport;
'  *      it just hast to be a node that implements the interface function:
'  *
'  *      function logItem(name, levelNum, text) as void
'  *
'  *      built in transports:
'  *      LogNodeTransport - output goes straight to debug print
'  *      LogScreenTransport - output is stored on
'  *      LogPrintTransport - output goes to console
'  *
'  * @param {integer} logLevel
'  *                level of the logging
'  *                0 - ERROR
'  *                1 - WARN
'  *                2 - INFO and METHOD
'  *                3 - VERBOSE
'  *                4 - DEBUG
'  * @returns {RLog} RLog instance for further configuration
'  */
function initializeLogManager(transportTypes = invalid, logLevel = invalid, includeDate = false) as object
  rLog = CreateObject("roSGNode", "Log")
  m.global.addFields({ "rLog": rLog })
  m.top.getScene().addFields({ "rLog": rLog })
  m.global.addFields({ "logIndentText": "" })
  m.global.addFields({ "logIndent": 0 })

  if transportTypes = invalid
    transportTypes = ["log_PrintTransport"]
  end if

  if logLevel = invalid
    logLevel = 2
  end if

  rlog.includeFilters = {}
  rlog.excludeFilters = {}
  rlog.transportTypes = transportTypes
  rlog.logLevel = logLevel
  rlog.includeDate = includeDate
  return rLog
end function

function rlog_global()
  return m.global
end function

function getLogInstance()
  if m.global <> invalid and m.global.rLog <> invalid
    return m.global.rLog
  end if

  if m.top.getScene() <> invalid
    'back up to help with some testing scenarios one might encounter
    return m.top.getScene().rLog
  end if
  return invalid
end function

class Logger
  private name
  private rLog

  function new(name = "general") as void
    m.name = name
    m.rLog = getLogInstance()
    if m.rLog <> invalid
      m.rLog_isFiltering = m.rLog.isFiltering
      m.rLog_logLevel = m.rLog.logLevel
      m.rLog_includeFilters = m.rLog.includeFilters
      m.rLog_excludeFilters = m.rLog.excludeFilters
      m.rLog_includeDate = m.rLog.includeDate
      m.rLog_logMode = m.rLog.logMode
      m.rLog_transports = m.rLog.transports
    else
      m.log = function(levelNum, level, message, value = "~#", value2 = "~#", value3 = "~#", value4 = "~#", value5 = "~#", value6 = "~#", value7 = "~#", value8 = "~#", value9 = "~#", isMethod = false) as void
        ? " ERROR  NO LOGGER FOUND IN " m.top
      end function
    end if
  end function

  function log(levelNum, level, message, value = "~#", value2 = "~#", value3 = "~#", value4 = "~#", value5 = "~#", value6 = "~#", value7 = "~#", value8 = "~#", value9 = "~#", isMethod = false) as void

    if m.rLog_isFiltering
      if m.rLog_logLevel < levelNum or (m.rLog_includeFilters.count() > 0 and m.rLog_includeFilters[m.name] = invalid) or (m.rLog_excludeFilters.count() > 0 and m.rLog_excludeFilters[m.name] <> invalid)
        return
      end if
    end if

    if m.rLog_includeDate
      level = m.rLog.dateText + " " + level
    end if

    g = rlog_global()
    if m.rLog_logMode = 1
      print g.logIndentText + level " " m.toString(message) " " m.toString(value) " " m.toString(value2) " " m.toString(value3) " " m.toString(value4) " " m.toString(value5) " " m.toString(value6) " " m.toString(value7) " " m.toString(value8) " " + m.toString(value9)
    else
      text = g.logIndentText + level + " " + m.toString(message) + " " + m.toString(value) + " " + m.toString(value2) + " " + m.toString(value3) + " " + m.toString(value4) + " " + m.toString(value5) + " " + m.toString(value6) + " " + m.toString(value7) + " " + m.toString(value8) + " " + m.toString(value9)

      if m.rLog_logMode = 3
        print text
      end if

      for each transport in m.rLog_transports
        transport.callFunc("logItem", m.name, levelNum, text)
      end for
    end if
  end function

  function increaseIndent(title = invalid as string) as void
    if title <> invalid
      m.info(">>  ", title, "  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<")
    end if
    m._changeIndent(1)
  end function

  function decreaseIndent() as void
    m._changeIndent(-1)
  end function

  function _changeIndent(delta as integer) as void
    g = rlog_global()
    newIndent = g.logIndent + delta
    logIndentText = ""
    g.logIndent = newIndent
    for i = 0 to newIndent - 2
      logIndentText += "  "
    end for
    if newIndent > 0
      logIndentText += " | "
    end if
    g.logIndentText = logIndentText
  end function

  function resetIndent() as void
    g = rlog_global()
    g.logIndent = 0
    g.logIndentText = ""
  end function

  function debug(message, value = "~#", value2 = "~#", value3 = "~#", value4 = "~#", value5 = "~#", value6 = "~#", value7 = "~#", value8 = "~#", value9 = "~#") as void
    if m.rLog = invalid then return
    m.log(4, "DEBUG", message, value, value2, value3, value4, value5, value6, value7, value8, value9)
  end function

  function verbose(message, value = "~#", value2 = "~#", value3 = "~#", value4 = "~#", value5 = "~#", value6 = "~#", value7 = "~#", value8 = "~#", value9 = "~#") as void
    if m.rLog = invalid then return
    m.log(3, "VERBOSE", message, value, value2, value3, value4, value5, value6, value7, value8, value9)
  end function

  function info(message, value = "~#", value2 = "~#", value3 = "~#", value4 = "~#", value5 = "~#", value6 = "~#", value7 = "~#", value8 = "~#", value9 = "~#") as void
    if m.rLog = invalid then return
    m.log(2, "INFO", message, value, value2, value3, value4, value5, value6, value7, value8, value9)
  end function

  function method(message, value = "~#", value2 = "~#", value3 = "~#", value4 = "~#", value5 = "~#", value6 = "~#", value7 = "~#", value8 = "~#", value9 = "~#") as void
    if m.rLog = invalid then return
    m.log(2, "METHOD", message, value, value2, value3, value4, value5, value6, value7, value8, value9, true)
  end function

  function warn(message, value = "~#", value2 = "~#", value3 = "~#", value4 = "~#", value5 = "~#", value6 = "~#", value7 = "~#", value8 = "~#", value9 = "~#") as void
    if m.rLog = invalid then return
    m.log(1, "WARN", message, value, value2, value3, value4, value5, value6, value7, value8, value9)
  end function

  function error(message, value = "~#", value2 = "~#", value3 = "~#", value4 = "~#", value5 = "~#", value6 = "~#", value7 = "~#", value8 = "~#", value9 = "~#") as void
    if m.rLog = invalid then return
    m.log(0, "ERROR", message, value, value2, value3, value4, value5, value6, value7, value8, value9)
  end function

  function toString(value as dynamic) as string
    valueType = type(value)
    if valueType = "<uninitialized>"
      return "UNINIT"
    else if value = invalid
      return "INVALID"
    else if getInterface(value, "ifString") <> invalid
      if value = "~#"
        return ""
      else
        return value
      end if
    else if valueType = "roInt" or valueType = "roInteger" or valueType = "Integer"
      return value.toStr()
    else if getInterface(value, "ifFloat") <> invalid
      return str(value).trim()
    else if valueType = "roSGNode"
      return "Node(" + value.subType() + ")"
    else if valueType = "roAssociativeArray"
      return "AA(" + formatJson(value) + ")"
    else if valueType = "roBoolean" or valueType = "Boolean"
      return value.toStr()
    else
      return ""
    end if
  end function
end class